install.packages("pxR", repos="http://R-Forge.R-project.org")
require(pxR)
ejemplo <-   read.pxr('ejemplo.px')
require(pxR)
ejemplo <-   read.px('ejemplo.px')
ejemplo <-   read.px('ejemplo2.px')
ejemplo <-   read.px('example2.px.px')
ejemplo <-   read.px('example2.px')
ejemplo <-   read.px('ejemplo.px')
ejemplo <-   read.px('ejemplo.px')
ejemplo <-   read.px('ejemplo.px')
ejemplo <-   read.px('ejemplo.px')
ejemplo <-   read.px('ejemplo.px')
ejemplo <-   read.px('ejemplo.px')
str(ejemplo)
a.ejemplo <- as.array ( ejemplo )
ejemplo <-   as.data.frame ('example2.px')
a.ejemplo <- as.array ( ejemplo )
ejemplo   <- read.px  ( 'ejemplo.px' )
d.ejemplo <-   as.data.frame ('example2.px')
a.ejemplo <- as.array ( ejemplo )
d.ejemplo
d.ejemplo
a.ejemplo
ejemplo   <- read.px        ( 'ejemplo.px' )  # Leer fichero px
d.ejemplo <- data.frame  ('example2.px')   # Transforma en array
a.ejemplo <- array       ( ejemplo )       # Transforma en darta.frame
d.ejemplo
a.ejemplo
ejemplo   <- read.px    ( 'ejemplo.px' ) # Leer fichero px
d.ejemplo <- data.frame ( ejemplo )      # Transforma en array
a.ejemplo <- array      ( ejemplo )      # Transforma en darta.frame
d.ejemplo
a.ejemplo
a.ejemplo <- as.array      ( ejemplo )      # Transforma en darta.frame
a.ejemplo
ejemplo   <-read.px   ( 'ejemplo.px' ) # Leer fichero px
d.ejemplo <- as.data.frame ( ejemplo )      # Transforma en array
a.ejemplo <- as.array      ( ejemplo )      # Transforma en darta.frame
d.ejemplo
a.ejemplo
head(d.ejemplo)
d.ejemplo <- as.data.frame ( ejemplo , direction = 'wide' )      # Transforma en array
a.ejemplo <- as.array      ( ejemplo )      # Transforma en darta.frame
head(d.ejemplo)
a.ejemplo
head(d.ejemplo)
d.ejemplo
a.ejemplo
ejemplo <- read.px     ('ejemplo.px')                  # Lee px-file
d.ejemplo <- as.data.frame (ejemplo, direction = 'wide') # To array
a.ejemplo <- as.array      (ejemplo)                     # To data.frame
d.ejemplo
a.ejemplo
IC[-1,] -> IC   # Borra el primer registro (total secciones)
as.array(read.px('consulta226/th05h_e.px'))  -> ev
require(pxR)
as.array(read.px('consulta226/th05h_e.px'))  -> ev
apply(ev,1:2,sum)                            -> ev
as.array(read.px('consulta226/th05h_pt.px')) -> pt
apply(pt,1:2,sum)                            -> pt
as.array(read.px('consulta226/th05h_e.px'))  -> ev
names(ev)
as.array(read.px('consulta226/th05h_e.px'))  -> ev
names(dimnames(ev))
length(ev[])
apply(ev,1:2,sum)                            -> ev
names(dimnames(ev))
length(ev[])
as.array(read.px('consulta226/th05h_pt.px')) -> pt
apply(pt,1:2,sum)                            -> pt
ev[,15:22]                                   -> ev
pt[,15:22]                                   -> pt
apply(ev,1,sum)-> obs
apply(ev,2,sum) / apply(pt,2,sum) -> tat
sweep(pt,2,tat,"*")               -> ee  # Esperadas por edad
apply(ee,1,sum) -> esp                   # Esperadas totales
obs/esp ->RME                # Razón de Mortalidad Estandarizada
Z <- 1.96                    # Para un alpha del 0.05
1/sqrt(obs) -> EE            # Error Estándar
cbind(RME, RME*exp(-Z*EE), RME*exp(Z*EE)) -> IC # Intervalo de Confianza
IC[-1,] -> IC                # Borra el primer registro (total secciones)
# Organiza y etiqueta objeto resultante:
as.data.frame(IC)-> IC ; str(IC)
names(IC) <- c('RME','LIC','UIC')
IC$GRUPO  <- with(IC, ifelse(UIC<1,1, ifelse(LIC>1,5,3) ) )
head(IC)
head(IC)
median(IC$RME[IC$GRUPO==1],na.rm=T) -> mi
# Mediana grupo inferior
median(IC$RME[IC$GRUPO==5],na.rm=T) -> ms
# Mediana grupo superior
IC$GRUPO[IC$GRUPO==1 & IC$RME > mi] <- 2
# Moderadamente BAJA
IC$GRUPO[IC$GRUPO==5 & IC$RME < ms] <- 4
table(IC$GRUPO)
head(IC)
median(IC$RME[IC$GRUPO==1],na.rm=T) -> mi
median(IC$RME[IC$GRUPO==5],na.rm=T) -> ms
IC$GRUPO  <- with(IC, ifelse(UIC<1,1, ifelse(LIC>1,5,3) ) )
median(IC$RME[IC$GRUPO==1],na.rm=T) -> mi
# Mediana grupo inferior
median(IC$RME[IC$GRUPO==5],na.rm=T) -> ms
# Mediana grupo superior
IC$GRUPO[IC$GRUPO==1 & IC$RME > mi] <- 2
# Moderadamente BAJA
IC$GRUPO[IC$GRUPO==5 & IC$RME < ms] <- 4
# Moderadamente ALTA
table(IC$GRUPO)
head(IC)
require(ggplo2)
require(ggplot2)
ggplot(IC, aes(x=ORDEN, y=RME, colour=GRUPO)) +
geom_errorbar(aes(ymin=LIC, ymax=UIC), width=0) +
geom_point(size=.5,colour= 'gray') +
theme_bw() +
scale_colour_manual(values = mycol) +
labs(list(x = "5381 secciones censales de Andalucía",
y = "RME con Intervalos de Confianza al 95%")) +
theme(legend.position = c(0.2, 0.8))  +
geom_hline(yintercept=1,color='blue') +
scale_y_log10(breaks=tips,labels=tips) +
theme(legend.background = element_rect(fill="gray90", size=.5 ))
IC <- subset(IC,IC$RME>0)
# Reordena data.frame y crea variable de rango
IC[order(IC$RME), ] -> IC
# ordena por nivel de RME
IC[order(IC$GRUPO),] -> IC
# ordena por GRUPO Alta, Baja ...
1:length(IC$RME) -> IC$ORDEN
# Posición de la sección
## Etiquetas de los grupos
etq <- c( 'Baja' , 'Moderadamente baja','Diferencia no significativa',
'Moderadamente alta','Alta')
## Reordena, para mejor visualización
IC$GRUPO <- factor(IC$GRUPO,labels = etq )
IC$GRUPO <- factor(IC$GRUPO,levels = rev(etq) )
## Colores y escalas:
mycol <- c('#d7191c','#fdae61','#ffffbf','#a6d96a','#1a9641')
tips -  c(0.25,0.5,1,2,4)
source('~/Dropbox/universidad/ecursos/AyVDatos/sINE/ppt/casosdeuso/02_SCAnd65.R')
# ------------------------------------------------------------
## Editar los datos:  Seleccionar, filtrar y agregar
## ------------------------------------------------------------
## Importamos eventos ("ev") y personas-año ("pt")
## y luego agregamos por edad y sección censal (suprimimos variables)
## EVENTOS:
as.array(read.px('consulta226/th05h_e.px'))  -> ev
names(dimnames(ev))
# [1] "PMDS" "Grupo.edad" "Nivel.educativo.7"
# [4] "Español"  "Propiedad.vivienda"
length(ev[])
# 8525088
apply(ev,1:2,sum)                            -> ev
names(dimnames(ev))
# [1] "PMDS" "Grupo.edad"
length(ev[])
# 118404
# PERSONAS-TIEMPO
as.array(read.px('consulta226/th05h_pt.px')) -> pt
apply(pt,1:2,sum)                            -> pt
## Filtramos ambos para mayores de 65 años
ev[,15:22]                                   -> ev
pt[,15:22]                                   -> pt
## Calcula eventos totales por sección
apply(ev,1,sum)-> obs
#  --------------------------------------------------------------
## Calcular la RME de mortalidad de hombres mayores de 65 años
#  --------------------------------------------------------------
## Calcula tasas del conjunto de Andalucía
##  y luego defunciones esperadas
apply(ev,2,sum) / apply(pt,2,sum) -> tat
sweep(pt,2,tat,"*")               -> ee  # Esperadas por edad
apply(ee,1,sum) -> esp                   # Esperadas totales
obs/esp ->RME                # Razón de Mortalidad Estandarizada
Z <- 1.96                    # Para un alpha del 0.05
1/sqrt(obs) -> EE            # Error Estándar
cbind(RME, RME*exp(-Z*EE), RME*exp(Z*EE)) -> IC # Intervalo de Confianza
IC[-1,] -> IC                # Borra el primer registro (total secciones)
# Organiza y etiqueta objeto resultante:
as.data.frame(IC)-> IC ; str(IC)
names(IC) <- c('RME','LIC','UIC')
IC$GRUPO  <- with(IC, ifelse(UIC<1,1, ifelse(LIC>1,5,3) ) )
## ----------------------------------------------------------------+
## Asigna los grupos de clasificación en niveles de mortalidad
## ----------------------------------------------------------------+
median(IC$RME[IC$GRUPO==1],na.rm=T) -> mi
# Mediana grupo inferior
median(IC$RME[IC$GRUPO==5],na.rm=T) -> ms
# Mediana grupo superior
IC$GRUPO[IC$GRUPO==1 & IC$RME > mi] <- 2
# Moderadamente BAJA
IC$GRUPO[IC$GRUPO==5 & IC$RME < ms] <- 4
# Moderadamente ALTA
table(IC$GRUPO)
#   1   2    3   4   5
# 742 741 2151 873 874
# Número de secciones en cada categoría:
head(IC)
#                 RME       LIC       UIC GRUPO
# 400101001 0.7799494 0.7166373 0.8488548     1
# 400201001 0.7541833 0.6891226 0.8253865     1
# 400301001 0.9382779 0.8489712 1.0369790     3
# 400301002 0.8350746 0.7022433 0.9930313     1
# 400301003 1.1650020 1.0541155 1.2875532     5
# 400301004 1.0876468 0.9541432 1.2398303     3
IC <- subset(IC,IC$RME>0)
# Reordena data.frame y crea variable de rango
IC[order(IC$RME), ] -> IC
# ordena por nivel de RME
IC[order(IC$GRUPO),] -> IC
# ordena por GRUPO Alta, Baja ...
1:length(IC$RME) -> IC$ORDEN
# Posición de la sección
## Etiquetas de los grupos
etq <- c( 'Baja' , 'Moderadamente baja','Diferencia no significativa',
'Moderadamente alta','Alta')
## Reordena, para mejor visualización
IC$GRUPO <- factor(IC$GRUPO,labels = etq )
IC$GRUPO <- factor(IC$GRUPO,levels = rev(etq) )
## Colores y escalas:
mycol <- c('#d7191c','#fdae61','#ffffbf','#a6d96a','#1a9641')
tips -  c(0.25,0.5,1,2,4)
tips  <-  c(0.25,0.5,1,2,4)
mycol <- c('#d7191c','#fdae61','#ffffbf','#a6d96a','#1a9641')
tips  <-  c(0.25,0.5,1,2,4)
ggplot(IC, aes(x=ORDEN, y=RME, colour=GRUPO)) +
geom_errorbar(aes(ymin=LIC, ymax=UIC), width=0) +
geom_point(size=.5,colour= 'gray') +
theme_bw() +
scale_colour_manual(values = mycol) +
labs(list(x = "5381 secciones censales de Andalucía",
y = "RME con Intervalos de Confianza al 95%")) +
theme(legend.position = c(0.2, 0.8))  +
geom_hline(yintercept=1,color='blue') +
scale_y_log10(breaks=tips,labels=tips) +
theme(legend.background = element_rect(fill="gray90", size=.5 ))
png(file='SCAnd01.pnf',width = 900, height = 700)
ggplot(IC, aes(x=ORDEN, y=RME, colour=GRUPO)) +
geom_errorbar(aes(ymin=LIC, ymax=UIC), width=0) +
geom_point(size=.5,colour= 'gray') +
theme_bw() +
scale_colour_manual(values = mycol) +
labs(list(x = "5381 secciones censales de Andalucía",
y = "RME con Intervalos de Confianza al 95%")) +
theme(legend.position = c(0.2, 0.8))  +
geom_hline(yintercept=1,color='blue') +
scale_y_log10(breaks=tips,labels=tips) +
theme(legend.background = element_rect(fill="gray90", size=.5 ))
dev.off()
